<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8" />
  <meta http-equiv="X-UA-Compatible" content="IE=edge" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <link rel="icon" type="image/svg+xml" href="/public/favicon.ico" />
  <link rel="apple-touch-icon" sizes="180x180" href="/public/apple-touch-icon.png">
  <link rel="icon" type="image/png" sizes="32x32" href="/public/favicon-32x32.png">
  <link rel="icon" type="image/png" sizes="16x16" href="/public/favicon-16x16.png">
  <link rel="manifest" href="/public/site.webmanifest">
  <title>บทที่ <%= lesson.lessonNum %> <%= lesson.lessonName %></title>
  <link rel="stylesheet" href="/public/css/form.css">
  <link rel="stylesheet" href="/public/css/table.css">
  <link rel="stylesheet" href="/public/css/menu.css">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.1.2/css/all.min.css" />
  <script src="https://kit.fontawesome.com/da08a429d6.js" crossorigin="anonymous"></script>
  <link href="/public/vendor/fontawesome-free/css/all.min.css" rel="stylesheet" type="text/css">
  <link
    href="https://fonts.googleapis.com/css?family=Noto+Sans+Thai:200,200i,300,300i,400,400i,600,600i,700,700i,800,800i,900,900i"
    rel="stylesheet">
  <link href="/public/css/sb-admin-2.min.css" rel="stylesheet">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css"
    integrity="sha512-vT5UMPFvujzKqG/Hoj1+0Tk38fANyEelFoOAJu7+8hpA+gSJJi+1WG9CvjKr+J75N8/KDnAMrZbGU9aAAqJ5NA=="
    crossorigin="anonymous" referrerpolicy="no-referrer" />
  <link href="/public/vendor/datatables/dataTables.bootstrap4.min.css" rel="stylesheet">
  <style>
    @import url('https://fonts.googleapis.com/css2?family=Dancing+Script&family=Noto+Sans+Thai:wght@100..900&family=Sarabun:wght@200&display=swap');

    .container {
      font-family: "Noto Sans Thai", sans-serif !important;
    }

    h1 {
      font-size: 1.5rem;
      margin: 3%;
    }

    #img_container img {
      width: 40%;
      margin-top: 3%;
      margin-bottom: 3%;
      margin: auto auto;
      display: block;
    }

    .content {
      margin: 3%;
      font-size: 1rem;
    }
    .video-container {
    display: flex;
    justify-content: center;
    align-items: center;
    background-color: #f8f9fa; 
  }

  #player {
    width: 640px;
    height: 390px;
  }
  </style>
</head>

<body id="page-top">
  <div id="wrapper">
    <ul class="navbar-nav bg-gradient-primary sidebar sidebar-dark accordion" id="accordionSidebar">
      <a class="sidebar-brand d-flex align-items-center justify-content-center" href="/adminHome">
        <div class="sidebar-brand-text mx-3" style="font-size: 15.5px;">Sexual learning</div>
      </a>
      <hr class="sidebar-divider my-0">
      <li class="nav-item">
        <a class="nav-link" href="#" id="classroomLink"> <!-- Copy 1 -->
            <i class="fa-solid fa-chalkboard-user"></i>
            <span>ห้องเรียน</span></a>
    </li>
    <li class="nav-item active">
        <a class="nav-link" href="#" id="lessonLink"> <!-- Copy 1 -->
            <i class="fa-solid fa-book"></i>
            <span>บทเรียน</span></a>
        </li> 
      <li class="nav-item">
        <a class="nav-link" href="/news/std">
          <i class="fas fa-newspaper"></i>
          <span>บทความ</span></a>
      </li>
      <li class="nav-item">
        <a class="nav-link" href="/scoreStd">
          <i class="fas fa-chalkboard-user"></i>
          <span>คะแนน</span></a>
      </li>
      <li class="nav-item">
        <a class="nav-link" href="/theme">
          <i class="fas fa-question"></i>
          <span>กระทู้ถาม-ตอบ</span></a>
      </li>

    </ul>
    <div id="content-wrapper" class="d-flex flex-column">
      <div id="content">
        <nav class="navbar navbar-expand navbar-light bg-white topbar mb-4 static-top shadow">
          <form class="form-inline">
            <button id="sidebarToggleTop" class="btn btn-link d-md-none rounded-circle mr-3">
              <i class="fa fa-bars"></i>
            </button>
          </form>
          <!--                     <form
                        class="d-none d-sm-inline-block form-inline mr-auto ml-md-10 my-2 my-md-0 mw-100 navbar-search">
                        <div class="input-group">
                            <input type="text" class="form-control bg-light border-0 small" placeholder="ค้นหา..."
                                aria-label="Search" aria-describedby="basic-addon2">
                            <div class="input-group-append">
                                <button class="btn btn-primary mr-auto" type="button">
                                    <i class="fas fa-search fa-sm"></i>
                                </button>
                            </div>
                        </div>
                    </form> -->
          <ul class="navbar-nav ml-auto">
            <div class="topbar-divider d-none d-sm-block"></div>
            <li class="nav-item dropdown no-arrow">
              <a class="nav-link dropdown-toggle" href="#" id="userDropdown" role="button" data-toggle="dropdown"
                aria-haspopup="true" aria-expanded="false">
                <div class="d-flex flex-column align-items-end">
                  <span id="userFirstname" class="mr-2 d-none d-lg-inline text-gray-800"></span>
                  <span id="userRole" class="mr-2 d-none d-lg-inline text-gray-600 small"></span>
                </div>
                <i class="fa fa-user-circle-o fa-2x"></i>
              </a>
              <div class="dropdown-menu dropdown-menu-right shadow animated--grow-in"
                                aria-labelledby="userDropdown">
                                <a class="dropdown-item" href="#">
                                    <i class="fas fa-user fa-sm fa-fw mr-2 text-gray-400"></i>
                                    แก้ไขโปรไฟล์
                                </a>
                                <a class="dropdown-item" href="/change-password">
                                    <i class="fas fa-lock fa-sm fa-fw mr-2 text-gray-400"></i>
                                    จัดการรหัสผ่าน
                                </a>
                                <div class="dropdown-divider"></div>
                                <a class="dropdown-item" href="#" id="logout" data-toggle="modal"
                                    data-target="#logoutModal">
                                    <i class="fas fa-sign-out-alt fa-sm fa-fw mr-2 text-gray-400"></i>
                                    ออกจากระบบ
                                </a>
                            </div>
            </li>
          </ul>
        </nav>
      </div>
      <div class="container mt-5">
        <div class="text-1" style="text-align: center;">
          <h1>
            <%= lesson.lessonName %>
          </h1>
        </div>
        <div class="container mt-6 display flex align-items-center justify-content-center">
          <!-- <div class="embed-responsive embed-responsive-16by9">
            <% if (lesson && lesson.vdo_url) { %>
              <iframe id="videoPlayer" width="560" height="315" src="https://www.youtube.com/embed/<%=
                lesson.vdo_url.includes('youtu.be') && lesson.vdo_url.includes('si=') 
                  ? lesson.vdo_url.split('/')[3].split('?')[0]
                  : lesson.vdo_url.includes('youtube.com/watch?v=') 
                    ? lesson.vdo_url.split('v=')[1].split('&')[0]
                    : lesson.vdo_url.includes('youtu.be') 
                      ? lesson.vdo_url.split('/')[3]
                      : ''
              %>" title="YouTube video player" frameborder="0"
                allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share"
                referrerpolicy="strict-origin-when-cross-origin" allowfullscreen></iframe>
              <% } else { %>
                <p>Video URL is not available.</p>
                <% } %>
          </div> -->
          <div class="video-container">
          <div id='player'></div>
        </div>
      
        <div class="content">
          <p>
            <%- lesson.content %>
          </p>
        </div>
<div class="d-flex justify-content-end pb-5">
  <a class="btn btn-primary" href="/question/post/<%= lesson._id %>">ทำแบบทดสอบหลังเรียน <i class="fa-solid fa-arrow-right"></i></a>
</div>
      </div>


      <script src="
   https://cdn.jsdelivr.net/npm/jwt-decode@4.0.0/build/cjs/index.min.js"></script>

      <script>
        const token = localStorage.getItem('token');
        const decodedToken = jwtDecode(token); // Decodes the JWT token

        const userId = decodedToken.userId;
        const lessonNum = "<%- lesson.lessonNum %>";
        const roomCode = "<%- student.roomCode %>";

        // Load the IFrame Player API code asynchronously.
        var tag = document.createElement('script');
        tag.src = "https://www.youtube.com/iframe_api";
        var firstScriptTag = document.getElementsByTagName('script')[0];
        firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);

        var player;
        let lastCheckpoint = 0;
        const saveInterval = 10000; // Save every 10 seconds
        let intervalId; // To track the interval

        // Create an <iframe> (and YouTube player) after the API code downloads.
        function onYouTubeIframeAPIReady() {
          const videoUrl = '<%= lesson.vdo_url %>';
          let videoId = '';

          if (videoUrl.includes('youtu.be')) {
            videoId = videoUrl.split('/')[3].split('?')[0];
          } else if (videoUrl.includes('youtube.com/watch?v=')) {
            videoId = videoUrl.split('v=')[1].split('&')[0];
          }

          player = new YT.Player('player', {
            height: '390',
            width: '640',
            videoId: videoId,
            playerVars: {
              'playsinline': 1,
              // 'controls': 0, // Disable all player controls
              'disablekb': 1, // Disable keyboard controls
            },
            events: {
              'onReady': onPlayerReady,
              'onStateChange': onPlayerStateChange,
            }
          });

        }

        function onPlayerReady(event) {
          getCheckpointFromServer().then(checkpoint => {
            if (checkpoint !== null) { // Ensure checkpoint is not null
              lastCheckpoint = checkpoint; // Store the checkpoint value
              event.target.seekTo(lastCheckpoint); // Seek to the checkpoint in the video
            }
          });
        }

        function onPlayerReady(event) {
          getCheckpointFromServer().then(checkpoint => {
            if (checkpoint !== null) { // Ensure checkpoint is not null
              lastCheckpoint = checkpoint; // Store the checkpoint value
              event.target.seekTo(lastCheckpoint); // Seek to the checkpoint in the video
            }
          });
        }

        function onPlayerStateChange(event) {
          const currentTime = player.getCurrentTime();
          if (event.data === YT.PlayerState.PLAYING) {
            clearInterval(intervalId); // Clear any existing intervals
            intervalId = setInterval(() => {
              const currentTime = player.getCurrentTime();
              if (currentTime > lastCheckpoint) {
                lastCheckpoint = currentTime;
                updateCheckpoint({ userId, lessonNum, currentTime, roomCode, status: 'Incomplete' });
              } else {
                // If the user seeks backward, send them back to the last checkpoint
                player.seekTo(lastCheckpoint);
              }
            }, saveInterval);
          } else if (event.data === YT.PlayerState.ENDED) {
            updateCheckpoint({ userId, lessonNum, currentTime: player.getCurrentTime(), roomCode, status: 'Complete' });
          }
        }

        function sendCheckpointToServer({ userId, lessonNum, currentTime, roomCode, status = 'Incomplete' }) {
          fetch('/lessonLog/createLessonLog', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({ studentId: userId, lessonNum, checkPoint: currentTime, status, roomCode }),
          })
            .then(response => {
              if (!response.ok) {
                throw new Error('Network response was not ok');
              }
              return response.json();
            })
            .then(data => {
              console.log('Successfully sent checkpoint:', data);
            })
            .catch((error) => {
              console.error('Error sending checkpoint:', error);
            });
        }

        function getCheckpointFromServer() {
          return fetch(`/lessonLog/getLessonLog?studentId=${userId}&lessonNum=${lessonNum}&roomCode=${roomCode}`, {
            method: 'GET',
            headers: {
              'Content-Type': 'application/json',
            },
          })
            .then(response => response.json()) // Convert the response to JSON
            .then(data => {
              if (data && Object.keys(data).length === 0) {
                return createNewCheckpoint(); // Create a new checkpoint if none exists
              } else {
                return data.data.checkPoint; // Return the existing checkpoint from the nested 'data' object
              }
            })
            .catch((error) => {
              console.error('Error retrieving checkpoint:', error);
              return null; // Return null in case of error
            });
        }

        function updateCheckpoint({ userId, lessonNum, currentTime, roomCode, status }) {
          fetch(`/lessonLog/updateLessonLog?studentId=${userId}&lessonNum=${lessonNum}&roomCode=${roomCode}`, {
            method: 'PUT',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({ checkPoint: currentTime, status }),
          })
            .then(response => {
              if (!response.ok) {
                throw new Error('Network response was not ok');
              }
              return response.json();
            })
            .then(data => {
              console.log('Successfully sent checkpoint:', data);
            })
            .catch((error) => {
              console.error('Error sending checkpoint:', error);
            });
        }

        function createNewCheckpoint() {
          // If no checkpoint exists, create a new entry with a starting checkpoint
          const initialCheckpoint = 0;
          return sendCheckpointToServer({ userId, lessonNum, currentTime: initialCheckpoint, roomCode }).then(() => {
            return initialCheckpoint; // Return the initial checkpoint after creation
          });
        }
      </script>
 <script src="/public/js/profileDetail.js"></script>
 <script src="/public/js/logout.js"></script>

 <script src="/public/js/studentRoleCheck.js"></script>
 <script src="/public/js/tokenChecked.js"></script><!-- Check login -->

      <script src="/public/js/script.js"></script>
      <script src="/public/vendor/jquery/jquery.min.js"></script>
      <script src="/public/vendor/bootstrap/js/bootstrap.bundle.min.js"></script>
      <script src="/public/vendor/jquery-easing/jquery.easing.min.js"></script>
      <script src="/public/js/sb-admin-2.min.js"></script>
      <!-- Copy 2 -->
    <script>
      // Ensure the DOM is fully loaded
      document.addEventListener('DOMContentLoaded', function () {
          const token = localStorage.getItem('token');
          const decodedToken = jwtDecode(token); // Decodes the JWT token
          const classroomId = decodedToken.classroomId;
          // Assuming userId is a field in your token
          const userId = decodedToken.userId;
          if (userId) {
              // Set the href attribute with the userId
              const classroomLink = document.getElementById('classroomLink');
              classroomLink.href = `/classroom/std/${userId}`;

              const scorelink = document.getElementById('scorelink');
              scorelink.href = `/attempt/score/${userId}`;
          }

          if (classroomId){
              const lessonLink = document.getElementById('lessonLink');
              lessonLink.href = `/lesson/std/${classroomId}`;
          }
          if(userId && classroomId){
              const quitLink = document.getElementById('quit-link');
              quitLink.href = `/classroomAttempt/std/delete/${userId}/${classroomId}`
          }
      });
  </script>
  <!-- End Copy -->
    </div>
  </div>
</body>

</html>