<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8" />
  <meta http-equiv="X-UA-Compatible" content="IE=edge" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <link rel="icon" type="image/svg+xml" href="/public/favicon.ico" />
  <link rel="apple-touch-icon" sizes="180x180" href="/public/apple-touch-icon.png">
  <link rel="icon" type="image/png" sizes="32x32" href="/public/favicon-32x32.png">
  <link rel="icon" type="image/png" sizes="16x16" href="/public/favicon-16x16.png">
  <link rel="manifest" href="/public/site.webmanifest">
  <title>ลงทะเบียน</title>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.1.2/css/all.min.css" />
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.3.1/dist/css/bootstrap.min.css"
    integrity="sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T" crossorigin="anonymous">
  <link rel="stylesheet" href="../public/css/register.css" />
  <style>
    .error-message {
      color: red;
      font-size: 0.875em;
      margin-top: 0.25em;
    }

    .input-group {
      position: relative;
    }

    .input-group .toggle-password {
      position: absolute;
      right: 10px;
      top: 50%;
      transform: translateY(-50%);
      cursor: pointer;
    }
  </style>
</head>

<body>

  <form id="registrationForm" action="/register" method="POST">
    <h2>ลงทะเบียน</h2>
    <div class="form-row">
      <div class="form-group col-md-6">
        <label for="name">ชื่อ</label>
        <input type="text" class="form-control" name="firstname" placeholder="ชื่อ" required>
        <div class="error-message" id="firstnameError"></div>
      </div>
      <div class="form-group col-md-6">
        <label for="lastname">นามสกุล</label>
        <input type="text" class="form-control" name="lastname" placeholder="นามสกุล" required>
        <div class="error-message" id="lastnameError"></div>
      </div>
    </div>

    <div class="form-row">
      <div class="form-group col-md-6">
        <label for="inputEmail4">อีเมล</label>
        <input type="email" class="form-control" name="email" placeholder="Example@gmail.com" required>
        <div class="error-message" id="emailError"></div>
      </div>
      <div class="form-group col-md-6">
        <label for="inputPassword4">รหัสผ่าน</label>
        <div class="input-group">
          <input type="password" class="form-control" name="password" placeholder="รหัสผ่าน" required>
          <span class="toggle-password" id="togglePassword">
            <i class="fas fa-eye"></i>
          </span>
        </div>
        <div class="error-message" id="passwordError"></div>
      </div>
    </div>
    <div class="form-row">
      <div class="form-group col-md-12">
        <label for="inputEmail4">โรงเรียน</label>
        <input type="text" class="form-control" name="school" placeholder="โรงเรียน" required>
        <div class="error-message" id="schoolError"></div>
      </div>
    </div>
    <label for="role">กลุ่มผู้ใช้งาน</label>
    <select class="form-select" name="role" id="role" required>
      <option value="" selected disabled>เลือกกลุ่มผู้ใช้งาน</option>
      <option value="student">นักเรียน</option>
      <option value="teacher">คุณครู</option>
    </select>
    <div class="error-message" id="roleError"></div>
    <div class="form-group submit-btn">
      <input type="submit" name="submit" value="ยืนยันการลงทะเบียน" />
    </div>
    <div class="link-container">
      <a href="#" class="noAc">มีบัญชีแล้ว?</a>
      <a href="/login" class="link">เข้าสู่ระบบ</a>
    </div>
  </form>

  <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>

  <script type="module">
    import z from 'https://cdn.jsdelivr.net/npm/zod@3.23.8/+esm';

    // Define the validation schema using Zod
    const formSchema = z.object({
      firstname: z.string().min(1, 'จำเป็นต้องกรอกชื่อ'),
      lastname: z.string().min(1, 'จำเป็นต้องกรอกนามสกุล'),
      email: z.string().email('รูปแบบอีเมลไม่ถูกต้อง'),
      password: z.string()
        .min(8, 'รหัสผ่านต้องมีความยาวอย่างน้อย 8 ตัวอักษร')
        .regex(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\d).*$/, 'รหัสผ่านจะต้องมีตัวพิมพ์ใหญ่ ตัวพิมพ์เล็ก และตัวเลข'),

      school: z.string().min(1, 'จำเป็นกรอกมีโรงเรียน'),
      role: z.string().min(1, 'กรุณาเลือกกลุ่มผู้ใช้งาน'),
    });

    document.getElementById('registrationForm').addEventListener('submit', async function (e) {
      e.preventDefault(); // Prevent default form submission

      // Clear previous error messages
      const errorElements = document.querySelectorAll('.error-message');
      errorElements.forEach(el => el.textContent = '');

      // Collect form values
      const formData = {
        firstname: document.querySelector('input[name="firstname"]').value,
        lastname: document.querySelector('input[name="lastname"]').value,
        email: document.querySelector('input[name="email"]').value,
        password: document.querySelector('input[name="password"]').value,
        school: document.querySelector('input[name="school"]').value,
        role: document.querySelector('select[name="role"]').value,
      };

      // Validate the form data using Zod
      const result = formSchema.safeParse(formData);

      if (!result.success) {
        const errors = result.error.errors;
        errors.forEach(error => {
          const errorMessage = error.message;
          const fieldName = error.path[0]; // Get the field name that caused the error

          // Display error message under the respective field
          document.getElementById(`${fieldName}Error`).textContent = errorMessage;
        });
      } else {
        // Send form data to the endpoint using Axios
        try {
          const response = await axios.post('/register', formData, {
            headers: {
              'Content-Type': 'application/json', // Send as JSON
            },
          });

          // Handle successful registration
          alert('Registration successful!'); // Customize this as needed
          window.location.replace("http://localhost:9999/login");
          // Optionally, redirect to another page
          // window.location.href = '/somewhere';
        } catch (error) {
          console.error('Error during registration:', error);
          if (error.response && error.response.data) {
            alert(`Registration failed: ${error.response.data.error || 'Please try again.'}`);
          } else {
            alert('Registration failed. Please try again.');
          }
        }
      }
    });

    // Password toggle functionality
    const togglePassword = document.getElementById('togglePassword');
    const passwordInput = document.querySelector('input[name="password"]');

    togglePassword.addEventListener('click', function () {
      const type = passwordInput.getAttribute('type') === 'password' ? 'text' : 'password';
      passwordInput.setAttribute('type', type);
      this.innerHTML = type === 'password' ? '<i class="fas fa-eye"></i>' : '<i class="fas fa-eye-slash"></i>';
    });
  </script>

</body>

</html>